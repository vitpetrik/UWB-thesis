```{julia}

using Statistics
using DataFrames
using Plots
using CSV
using Printf
using LaTeXStrings

gr()

default_plots = (
    fontfamily="computer modern",
    lims = :round,
    minorgrid=true,
    legend=false,
    color_palette=:lighttest,
    widen=true,
    titlefontsize=11
)

```

# Simulations and real-world experiments

A series of experiments have been conducted to evaluate the performance of the proposed measurement system. Experiments took place at Temešvár (N49.36225 E14.26143). A two Holybro X500 [@fig-holybrox500] equipped with Qorvo DWM1000 has been chosen as a UAV platform. These drones were mainly chosen due to the RTK GNSS system onboard, which is crucial for evaluating accuracy by using them as a source of ground truth.

![Holybro X500 with UVDAR cameras and UWB radio.](images/holybrox500.jpg){#fig-holybrox500 width="70%"}

[^1]: <http://mrs.felk.cvut.cz/research/micro-aerial-vehicles>

## Ultra-wide band experiments

### Line segment test {.unnumbered .unlisted}

This experiment aims to test the maximum range and obtain a transfer characteristic of the sensor. 
The purpose of the first UAV was to act as an observer and, for the duration of the test remained at position $\begin{bmatrix}0 & 0 & 5\end{bmatrix}^T$. 
The econd UAV was flying on a trajectory predefined by the parametric equation @eq-line-test.

$$
    \mathbf{position}(t) = \begin{bmatrix} 0 \\ 65 + 55 \sin (2 \pi t) \\ 5 \end{bmatrix}, \quad t \in \left(0, 1\right)
$$ {#eq-line-test}

### Circular trajectory {.unnumbered .unlisted}

As noted above, the results from the UWB should be the same for all orientations.
To test whether that is a correct assumption, 4 experiments have been conducted.
In each test, one UAV acted as an observer and stayed at position $\begin{bmatrix}0 & 0 & 5\end{bmatrix}^T$. The second UAV followed a circle of radius 10 m around the first UAV in a car-like motion. The difference between the 4 experiments was the relative angle $\theta$ as shown in figure @fig-circular-experiment.

![Circular trajectory experiment.](images/circular-test.svg){#fig-circular-experiment width="80%"}

### Results {.unnumbered .unlisted}

All proposed experiments regarding the UWB were successfully conducted. Results from the first experiment in Figure @fig-tranfer-function showed that the UWB measurements are indeed precise and do not express any signs of nonlinearity. 
The maximum range of 120 m was reached by UWB, however, the measurements at the far end are not reliable and often drop out.

\setkeys{Gin}{width=0.66\textwidth,height=\textheight,keepaspectratio}
```{julia}

#| label: fig-tranfer-function
#| fig-cap: "Transfer characteristic of UWB."
#| output: true

data = CSV.File("data/data_line.csv")

offset = mean(data.rtk_distance - data.range_uwb)
@. data.range_uwb += offset
plot(;default_plots..., 
        xlabel="RTK [m]", 
        ylabel="UWB [m]",
        size=(400,300)
    )

plot!(data.rtk_distance, data.range_uwb)
```
\setkeys{Gin}{width=\textwidth,height=\textheight,keepaspectratio}

```{julia}
#| label: fig-line-in-time
#| fig-cap: "Trajectory plotted in time with error."
#| output: true

plot(;default_plots..., 
        xlabel="Time [s]", 
        ylabel="Range [m]",
        legend=:bottomleft,
    )

plot!(data.timestamp, data.rtk_distance, label="RTK")
plot!(data.timestamp, data.range_uwb, label="UWB")
plot!(twinx(), 
        data.timestamp, 
        data.range_uwb - data.rtk_distance,
        title="\n\rRMSE = $(@sprintf("%.2f m", mean((data.range_uwb - data.rtk_distance).^2)^(1/2)))",
        lc=:red; 
        default_plots..., 
        legend=true, 
        y_foreground_color_axis=:red,
        y_foreground_color_border=:red,
        y_foreground_color_text=:red,
        label=" Error (UWB - RTK)")


```

As Figure @fig-angle shows, the measurement error is dependent on the angle. 
In *A sources of error in DW1000* [@qorvo:aps011] the manufacturer mentions that there are two sources of error, clock drift and received signal level.
The implemented ranging technique (double-sided two-way ranging) compensates for clock drift. Therefore, the only error source left is the received signal level. The more powerful the signal, the sooner it is timestamped, leading to a shorter distance reported. 
This error could be easily corrected by constructing correction function $f(\mathrm{dB})$. 
Unfortunately, the received signal level was not recorded.
Further research should be done to correct errors dependent on the level of the received signal.

Results and ranging multiple static responders with UWB is demonstrated in Appendix C.

```{julia}
#| label: fig-angle
#| fig-cap: "Comparison between different radiation angles."
#| output: true

plot(;default_plots..., 
        xlabel=L"\varphi \;\; \mathrm{[rad]}", 
        ylabel="Error [m]",
    )

data = DataFrame(CSV.File("data/data_0.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.range_uwb - data.rtk_distance, legend=true, label=L"\theta = 0")
data = DataFrame(CSV.File("data/data_90.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.range_uwb - data.rtk_distance, legend=true, label=L"\theta = \frac{1}{2} \pi")
data = DataFrame(CSV.File("data/data_180.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.range_uwb - data.rtk_distance, legend=true, label=L"\theta = \pi")
data = DataFrame(CSV.File("data/data_270.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.range_uwb - data.rtk_distance, legend=true, label=L"\theta = \frac{3}{4} \pi")


```

## UVDAR and UWB fusion experiments

### Leader follower algorithm {.unnumbered .unlisted}

To test the fusion of UVDAR and UWB in loop, a leader-follower algorithm was used.
In this test, a leader UAV flies a pre-planned trajectory. A follower UAV tries to follow the leader based only on UVDAR and UWB sensor fusion.
The algorithm was inspired by the *UVDAR System for Visual Relative Localization With Application to Leader–Follower Formations of Multirotor UAVs* [@8651535] and is represented in figure @fig-leader-follower. The follower was set to follow the leader with $r = 6 \; \mathrm{m}$ and $\varphi =$ 180°.

![Visual representation of the leader-follower algorithm.](images/leader-follower.svg){#fig-leader-follower width="80%"}

### Results {.unnumbered .unlisted}

Unfortunately, due to an incorrect configuration of the experiment, the test has not been successfully conducted in real-life.
A simulated test using the Gazebo simulator[^gazebo] was conducted as an alternative approach.
A special node was made to simulate results from UWB, the node calculates a distance between UAVs from ground truth and then adds noise with distribution $\mathcal{N}(0, 0.05)$.
The test was repeated two times. First, the UWB and UVDAR fusion was kept for the whole time, providing an accurate position of the leader UAV. During the second test, the fusion process was halted mid-way and only UVDAR measurements were utilized. 

The results depicted in Figure @fig-leader-follower-result demonstrate the advantages of fusing the UWB and UVDAR technologies.
Due to the absence of precise distance measurements from UWB (Ultra-Wideband) technology, the follower UAV could not maintain track of the leader UAV.

More simulated tests of the Object tracker can be seen in Appendix C.

```{julia}

#| label: fig-leader-follower-result
#| fig-cap: "Leader-follower algorithm results."
#| output: true

l = @layout [grid(1,2){0.6h}; a{0.4h}]

compare_plot = plot(;default_plots..., 
        xlabel="Time [s]", 
        ylabel="Distance [m]",
        legend=:topleft,
        size=(600,600),
        ylims=(5, 20)
    )
hline!(compare_plot, [6], linestyle=:dash, label=false)
fusion = plot(;default_plots..., 
        xlabel="x [m]", 
        ylabel="y [m]",
        aspect_ratio = :equal,
        ylims=(-15,15),
        xlims=(-15,15)
    )
halted = plot(;default_plots..., 
        xlabel="x [m]", 
        ylabel="y [m]",
        legend=:topright,
        aspect_ratio = :equal,
        ylims=(-15,15),
        xlims=(-15,15)
    )

data = CSV.File("data/LF_fusion/object_tracker.csv")

plot!(compare_plot, data.range_gt, label="Not halted")

leader_gt = [data.x_gt, data.y_gt]
observer_gt = [data.x_obs, data.y_obs]
leader_ot = [data.x_ot, data.y_ot]

plot!(fusion, observer_gt..., label="Observer")
plot!(fusion, leader_gt..., label="Leader")
plot!(fusion, leader_ot..., label="Observed leader")

data = CSV.File("data/LF_halted/object_tracker.csv")

plot!(compare_plot, data.range_gt, label=" Halted")

leader_gt = [data.x_gt, data.y_gt]
observer_gt = [data.x_obs, data.y_obs]
leader_ot = [data.x_ot, data.y_ot]

plot!(halted, observer_gt..., label="Observer")
plot!(halted, leader_gt..., label="Leader")
plot!(halted, leader_ot..., label="Observed leader")

xlims!(fusion, xlims(halted))
ylims!(fusion, ylims(halted))

plot(fusion, halted, compare_plot, layout=l)
```

[^gazebo]: Gazebo simulator <https://gazebosim.org/home>
