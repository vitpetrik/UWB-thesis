```{julia}

using Statistics
using DataFrames
using Plots
using CSV
using Printf

gr()

default_plots = (
    fontfamily="computer modern",
    lims = :round,
    minorgrid=true,
    legend=false,
    color_palette=:lighttest,
    widen=true,
)

```

# Simulations and real-world experiments

A series of experiments have been conducted to evaluate the performance of the proposed measurement system. Experiments took place at Temešvár and Císařský ostrov. A couple of Holybro X500 [@fig-holybrox500] equipped with Qorvo DWM1000 has been chosen as a test platform. These drones were mainly chosen due to the RTK GNSS system onboard, which is crucial for evaluating accuracy and is used as source of ground truth.

![Holybro X500 [^1].](images/holybrox500.jpg){#fig-holybrox500 width="70%"}

[^1]: <http://mrs.felk.cvut.cz/research/micro-aerial-vehicles>

### Line segment test

This experiment aims to test maximum range and get transfer characteristic of the sensor. 
The first UAV purpose was to act as an observer and for the entire duration of the test stayed at position $\left(0, 0, 0\right)$. 
Second UAV was flying in a trajectory predefined by parametric equation @eq-line-test.

$$
    \mathbf{position}(t) = \begin{pmatrix} 0 \\ 65 + 55 \sin (2 \pi t) \\ 5 \end{pmatrix}, \quad t \in \left(0, 1\right)
$$ {#eq-line-test}

### Circular trajectory

As it was noted before, the results from UWB should be the same for all orientations.
To test whether that is a correct assumption, 4 experiments have been conducted.
In each test one UAV acted as an observer and stayed stayed at position $\left(0, 0, 0\right)$. The second UAV followed a circle of radius 10 m around the first UAV. The difference between the 4 experiments was relative angle respective to velocity vector.

### Leader follower algorithm

To test the fusion of UVDAR and UWB in-loop, a leader-follower algorithm has been used.
In this test, a leader UAV flies a preplanned trajectory. A follower UAV tries to follow the leader based only on UVDAR and UWB sensor fusion.
The algorithm was inspired by @8651535.

## Results

All proposed experiments were successfully conducted. The first experiment \[Figure @fig-tranfer-function\] showed that the UWB measurements are indeed precise and do not express any signs of nonlinearity. 
The maximum range of 120 m was reached by UWB, however, the measurements at the far end are not reliable and often drops out. This can be seen as straight lines in Figure @fig-tranfer-function\. 
Somehow cite this @qorvo:aps011
```{julia}

#| label: fig-tranfer-function
#| fig-cap: "Transfer characteristic of UWB"
#| output: true

data = CSV.File("data/data_line.csv")

offset = mean(data.rtk_distance - data.range_uwb)
@. data.range_uwb += offset
plot(;default_plots..., 
        xlabel="RTK [m]", 
        ylabel="UWB [m]",
    )

plot!(data.rtk_distance, data.range_uwb)


```

```{julia}
#| label: fig-line-in-time
#| fig-cap: "Transfer characteristic of UWB"
#| output: true

plot(;default_plots..., 
        xlabel="Time [s]", 
        ylabel="Range [m]",
        legend=true
    )

plot!(data.timestamp, data.rtk_distance, label="RTK")
plot!(data.timestamp, data.range_uwb, label="UWB")
plot!(twinx(), 
        data.timestamp, 
        data.rtk_distance - data.range_uwb,
        lc=:red; 
        default_plots..., 
        legend=true, 
        y_foreground_color_axis=:red,
        y_foreground_color_border=:red,
        y_foreground_color_text=:red,
        label="Absolute error")


```

```{julia}
#| label: fig-angle
#| fig-cap: "Transfer characteristic of UWB"
#| output: true


plot(;default_plots..., 
        xlabel="Angle [rad]", 
        ylabel="Error [m]",
    )

data = DataFrame(CSV.File("data/data_0.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.rtk_distance - data.range_uwb, legend=true, label="0")
data = DataFrame(CSV.File("data/data_90.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.rtk_distance - data.range_uwb, legend=true, label="π/2")
data = DataFrame(CSV.File("data/data_180.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.rtk_distance - data.range_uwb, legend=true, label="π")
data = DataFrame(CSV.File("data/data_270.csv"))
sort!(data, [:angle])
@. data.range_uwb += offset
plot!(data.angle, data.rtk_distance - data.range_uwb, legend=true, label="π3/4")


```
